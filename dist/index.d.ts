// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../d3

import * as d3 from 'd3';

export abstract class ChartwerkBase {
    protected _d3: typeof d3;
    protected _series: TimeSerie[];
    protected _options: Options;
    protected _d3Node?: d3.Selection<HTMLElement, unknown, null, undefined>;
    protected _chartContainer?: d3.Selection<SVGGElement, unknown, null, undefined>;
    protected _crosshair?: d3.Selection<SVGGElement, unknown, null, undefined>;
    protected _brush?: d3.BrushBehavior<unknown>;
    constructor(_d3: typeof d3, el: HTMLElement, _series?: TimeSerie[], _options?: Options);
    render(): void;
    abstract _renderMetrics(): void;
    _renderSvg(): void;
    _renderGrid(): void;
    _renderXAxis(): void;
    _renderYAxis(): void;
    _renderLegend(): void;
    _renderYLabel(): void;
    _renderXLabel(): void;
    get xScale(): d3.ScaleLinear<number, number> | d3.ScaleTime<number, number>;
    get xTimeScale(): d3.ScaleTime<number, number>;
    get yScale(): d3.ScaleLinear<number, number>;
    ticksCount(scaleFactor: number): d3.TimeInterval | number;
    get daysCount(): number;
    get serieTimestampRange(): number | undefined;
    get timeFormat(): (date: Date) => string;
    get xTickTransform(): string;
    get extraMargin(): Margin;
    get width(): number;
    get height(): number;
    get margin(): Margin;
    get minValue(): number | undefined;
    get maxValue(): number | undefined;
    formatedBound(alias: string, target: string): string;
    get seriesTargetsWithBounds(): any[];
}

export type Margin = {
    top: number;
    right: number;
    bottom: number;
    left: number;
};
export type TimeSerie = {
    target: string;
    alias: string;
    datapoints: [number, number][];
    visible: boolean;
};
export type Options = {
    margin?: Margin;
    colors?: string[];
    confidence?: number;
    eventsCallbacks?: {
        zoomIn: (range: [number, number]) => void;
        zoomOut: (center: number) => void;
        mouseMove: (evt: any) => void;
        mouseOut: () => void;
        onLegendClick: (idx: number) => void;
    };
    timeInterval?: number;
    tickFormat?: {
        xAxis?: string;
        xTickOrientation?: TickOrientation;
    };
    labelFormat?: {
        xAxis?: string;
        yAxis?: string;
    };
    bounds?: {
        upper: string;
        lower: string;
    };
};
export enum TickOrientation {
    VERTICAL = "vertical",
    HORIZONTAL = "horizontal",
    DIAGONAL = "diagonal"
}

