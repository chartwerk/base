import VueChartwerkBaseMixin from './VueChartwerkBaseMixin';
import { BaseState } from './state';
import { Margin, TimeSerie, Options, TickOrientation, TimeFormat, ZoomOrientation, ZoomType, AxisFormat } from './types';
import { palette } from './colors';
import * as d3 from 'd3';
declare abstract class ChartwerkBase<T extends TimeSerie, O extends Options> {
    protected _d3: typeof d3;
    protected _series: T[];
    protected readonly _options: O;
    protected _d3Node?: d3.Selection<HTMLElement, unknown, null, undefined>;
    protected _chartContainer?: d3.Selection<SVGGElement, unknown, null, undefined>;
    protected _crosshair?: d3.Selection<SVGGElement, unknown, null, undefined>;
    protected _brush?: d3.BrushBehavior<unknown>;
    protected _zoom?: any;
    protected _svg?: d3.Selection<SVGElement, unknown, null, undefined>;
    protected _state?: BaseState;
    protected _clipPath?: any;
    protected _isPanning: boolean;
    protected _isBrushing: boolean;
    private clipPathUID;
    constructor(_d3: typeof d3, el: HTMLElement, _series: T[], _options: O);
    render(): void;
    abstract _renderMetrics(): void;
    abstract onMouseOver(): void;
    abstract onMouseOut(): void;
    abstract onMouseMove(): void;
    abstract renderSharedCrosshair(timestamp: number): void;
    abstract hideSharedCrosshair(): void;
    _initBaseState(): void;
    _renderSvg(): void;
    _renderGrid(): void;
    _renderXAxis(): void;
    _renderYAxis(): void;
    _renderCrosshair(): void;
    _useBrush(): void;
    _useScrollZoom(): void;
    _renderClipPath(): void;
    _renderLegend(): void;
    _renderYLabel(): void;
    _renderXLabel(): void;
    _renderNoDataPointsMessage(): void;
    _onPanningZoom(event: d3.D3ZoomEvent<any, any>): void;
    _onPanningEnd(): void;
    onBrushStart(): void;
    onBrushEnd(): void;
    scrollZoomed(): void;
    zoomOut(): void;
    get absXScale(): d3.ScaleLinear<number, number>;
    get absYScale(): d3.ScaleLinear<number, number>;
    get xScale(): d3.ScaleLinear<number, number>;
    get yScale(): d3.ScaleLinear<number, number>;
    get minValue(): number;
    get maxValue(): number;
    get minValueX(): number;
    get maxValueX(): number;
    get axisBottomWithTicks(): d3.Axis<number | Date | {
        valueOf(): number;
    }>;
    get ticksCount(): d3.TimeInterval | number;
    getd3TimeRangeEvery(count: number): d3.TimeInterval;
    get serieTimestampRange(): number | undefined;
    get xAxisTicksFormat(): (d: any) => any;
    get timeInterval(): number;
    get xTickTransform(): string;
    get extraMargin(): Margin;
    get width(): number;
    get height(): number;
    get legendRowPositionY(): number;
    get margin(): Margin;
    get isSeriesUnavailable(): boolean;
    formatedBound(alias: string, target: string): string;
    protected getSerieColor(idx: number): string;
    get seriesTargetsWithBounds(): any[];
    get visibleSeries(): any[];
    get rectClipId(): string;
    isOutOfChart(): boolean;
}
export { ChartwerkBase, VueChartwerkBaseMixin, Margin, TimeSerie, Options, TickOrientation, TimeFormat, ZoomOrientation, ZoomType, AxisFormat, palette };
